(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    575296,      10685]
NotebookOptionsPosition[    568686,      10578]
NotebookOutlinePosition[    569061,      10594]
CellTagsIndexPosition[    569018,      10591]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.8069288640443754`*^9},ExpressionUUID->"3165da32-4b06-4606-9620-\
cf0c73d81527"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Directory", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.746276465209371*^9, 3.746276474746329*^9}, {
  3.7957781557782564`*^9, 3.7957781762674417`*^9}},
 CellLabel->
  "In[290]:=",ExpressionUUID->"ef179646-e028-4bd8-9e28-b27a857d6383"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.807459544934187*^9, 
  3.807459546141342*^9}},ExpressionUUID->"7d98b350-338e-4e67-b5a8-\
2526f9ffa459"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.807459531994379*^9, 
  3.8074595338409977`*^9}},ExpressionUUID->"2ff983a6-ae2d-4a63-8651-\
39c45c1daa33"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataSet", "=", 
   RowBox[{"Import", "[", "\"\<TrainingData.csv\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7462765147422237`*^9, 3.746276532282202*^9}, {
   3.795779404993168*^9, 3.795779442540717*^9}, 3.7957805902049932`*^9, {
   3.7957939306550293`*^9, 3.7957939586611395`*^9}, {3.806929442742075*^9, 
   3.8069294765545893`*^9}, {3.8069295086988225`*^9, 
   3.8069295494437847`*^9}, {3.806929627182588*^9, 3.8069296290087028`*^9}, {
   3.806929670488698*^9, 3.8069296858456016`*^9}, {3.806929724531075*^9, 
   3.8069297389135857`*^9}, {3.8074549956841373`*^9, 
   3.8074549980720606`*^9}, {3.807457420935542*^9, 3.8074574279355354`*^9}, {
   3.8074579518612776`*^9, 3.8074579533686776`*^9}, {3.807458864265422*^9, 
   3.8074588750839295`*^9}, {3.807459297793227*^9, 3.807459306016876*^9}},
 CellLabel->
  "In[286]:=",ExpressionUUID->"94e3b12d-8af8-4190-8457-8ff1dbee74aa"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"dataSet", "\[LeftDoubleBracket]", 
    RowBox[{";;", "15"}], "\[RightDoubleBracket]"}], "//", "TableForm"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"The", " ", "firts", " ", "two", " ", "colums", " ", 
    RowBox[{"(", 
     RowBox[{"input", " ", "variables"}], ")"}], " ", "are", " ", "the", " ", 
    "number", " ", "concentration", " ", "and", " ", "liquid", " ", "water", 
    " ", "content"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "The", " ", "third", " ", "column", " ", "is", " ", "the", " ", 
    "normalized", " ", "theoretical", " ", "autoconversion", " ", "rate", " ", 
    RowBox[{"(", 
     RowBox[{
     "for", " ", "drop", " ", "number", " ", "concentration", " ", "or", " ", 
      "liquid", " ", "water", " ", "content"}], ")"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.746336945740943*^9, 3.7463369569968414`*^9}, {
  3.8074579647473726`*^9, 3.807457965330989*^9}, {3.807458214007843*^9, 
  3.807458214226566*^9}, {3.8074584131336837`*^9, 3.8074585135635147`*^9}, {
  3.8074586438011684`*^9, 3.8074586466681776`*^9}, {3.807459327185629*^9, 
  3.807459328446975*^9}},
 CellLabel->
  "In[287]:=",ExpressionUUID->"cea05b10-5180-4d83-8ffe-2bec0a1ecd5f"],

Cell[BoxData[
 TagBox[GridBox[{
    {"675.366647666984`", "1.08232966870156`*^-6", "0.204867510325711`"},
    {"370.008538755957`", "6.49731580747079`*^-7", 
     RowBox[{"-", "0.230523104157779`"}]},
    {"854.939076644664`", "6.90575350181802`*^-7", 
     RowBox[{"-", "0.543229654070148`"}]},
    {"110.573208935713`", "7.76996372225851`*^-7", "1.205002973219`"},
    {"762.408127975938`", "4.96066119203023`*^-7", 
     RowBox[{"-", "0.571896302110357`"}]},
    {"181.637888325725`", "1.03477876656952`*^-6", "2.633853033906`"},
    {"1245.26197550334`", "9.46977850458169`*^-7", 
     RowBox[{"-", "0.526478577238802`"}]},
    {"496.535371509074`", "3.93788333027642`*^-7", 
     RowBox[{"-", "0.56830781140362`"}]},
    {"954.435266397749`", "7.87758423285594`*^-7", 
     RowBox[{"-", "0.528181592227878`"}]},
    {"388.156864675577`", "7.94807261470049`*^-7", "0.135152826389093`"},
    {"1015.50702085562`", "1.16150875646438`*^-6", 
     RowBox[{"-", "0.224609184175395`"}]},
    {"526.191469853408`", "6.96914997213078`*^-7", 
     RowBox[{"-", "0.381314355097264`"}]},
    {"92.0137466045848`", "2.17610874522025`*^-7", 
     RowBox[{"-", "0.510270915890011`"}]},
    {"378.092079903097`", "5.16254155410853`*^-7", 
     RowBox[{"-", "0.460981859204445`"}]},
    {"460.420427279861`", "3.01436211038563`*^-7", 
     RowBox[{"-", "0.576392448332217`"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.746345387462238*^9, 3.795749121024087*^9, 3.795749168243123*^9, 
   3.7957774897884836`*^9, 3.795780600873464*^9, 3.7957939697135363`*^9, 
   3.7957995852959323`*^9, 3.795800882335822*^9, 3.7959667204468985`*^9, 
   3.8074574505958495`*^9, {3.807457959785241*^9, 3.8074579712093196`*^9}, 
   3.8074583959049454`*^9, {3.8074585207635555`*^9, 3.8074585306378183`*^9}, 
   3.8074588961015835`*^9, {3.8074593214911504`*^9, 3.807459341929753*^9}},
 CellLabel->
  "Out[287]//TableForm=",ExpressionUUID->"5284228c-d0b8-4777-ada5-\
302af618cf6e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"(*", 
   RowBox[{"Check", " ", "the", " ", "number", " ", "of", " ", "samples"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.807455012567175*^9, 
  3.807455029425212*^9}},ExpressionUUID->"21a64543-70ab-4f1d-9f90-\
dbb784a15836"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "dataSet", "]"}]], "Input",
 CellChangeTimes->{{3.7462765461336517`*^9, 3.7462765518590126`*^9}},
 CellLabel->
  "In[233]:=",ExpressionUUID->"91193f15-bce6-4a03-98b2-22af802011ea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"100000", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.746345437303668*^9, 3.795749139220023*^9, 
  3.7957491708206215`*^9, 3.795780619086692*^9, 3.795794069178955*^9, 
  3.795799593400509*^9, 3.795800888692808*^9, 3.79596672483644*^9, 
  3.807457459490101*^9, 3.807457979379468*^9, 3.807458541659028*^9, 
  3.807458904868024*^9},
 CellLabel->
  "Out[233]=",ExpressionUUID->"d3baec9f-4663-4422-a144-ecd3e02d67b4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Calculating", " ", "the", " ", "number", " ", "of", " ", "samples", " ", 
    "in", " ", "training", " ", 
    RowBox[{"dataset", ":", " ", 
     RowBox[{"80", "%", " ", "of", " ", "the", " ", "data"}]}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"n", "=", 
     RowBox[{"Length", "[", "dataSet", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"trainN", "=", 
     RowBox[{"Floor", "[", 
      RowBox[{"0.8", " ", "n"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "Splitting", " ", "the", " ", "data", " ", "into", " ", "training", " ", 
     "and", " ", "test", " ", "datasets"}], "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.7462770483275213`*^9, 3.7462770849863634`*^9}, {
  3.7463371668117523`*^9, 3.746337197562518*^9}, {3.8074552525544205`*^9, 
  3.8074552990868835`*^9}, {3.8074577472370996`*^9, 3.807457776213767*^9}},
 CellLabel->
  "In[234]:=",ExpressionUUID->"f6a190ae-4181-411f-b89a-d4451d35792d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"RandomSeed", "[", "123", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"dataTrain", ",", "dataTest"}], "}"}], "=", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{
     RowBox[{"RandomSample", "@", "dataSet"}], ",", "trainN"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "dataTrain", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "dataTest", "]"}]}], "Input",
 CellChangeTimes->{{3.74627717880267*^9, 3.7462771811012588`*^9}},
 CellLabel->
  "In[240]:=",ExpressionUUID->"78d5f27e-9640-4942-b131-bb18871b91fc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"80000", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.746345700160282*^9, 3.7957491860045323`*^9, 3.7957775174025774`*^9, {
   3.795783643748717*^9, 3.7957836513752785`*^9}, 3.7957940886787844`*^9, 
   3.7957996132571764`*^9, 3.7958009052295403`*^9, 3.7959667420320196`*^9, 
   3.8074574783993664`*^9, {3.8074579998399096`*^9, 3.807458005253997*^9}, 
   3.8074585583673105`*^9, {3.807458916630677*^9, 3.807458919027731*^9}},
 CellLabel->
  "Out[242]=",ExpressionUUID->"7076036c-4d07-4248-9b07-3150c67953ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"20000", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{
  3.746345700160282*^9, 3.7957491860045323`*^9, 3.7957775174025774`*^9, {
   3.795783643748717*^9, 3.7957836513752785`*^9}, 3.7957940886787844`*^9, 
   3.7957996132571764`*^9, 3.7958009052295403`*^9, 3.7959667420320196`*^9, 
   3.8074574783993664`*^9, {3.8074579998399096`*^9, 3.807458005253997*^9}, 
   3.8074585583673105`*^9, {3.807458916630677*^9, 3.807458919027731*^9}},
 CellLabel->
  "Out[243]=",ExpressionUUID->"1c28795c-7f27-4561-8339-ab37da2b7b98"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"xTrain", "=", 
   RowBox[{"dataTrain", "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", 
     RowBox[{"1", ";;", "2"}]}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"yTrain", "=", 
   RowBox[{"dataTrain", "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", "3"}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xTest", "=", 
   RowBox[{"dataTest", "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", 
     RowBox[{"1", ";;", "2"}]}], "\[RightDoubleBracket]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"yTest", "=", 
   RowBox[{"dataTest", "\[LeftDoubleBracket]", 
    RowBox[{"All", ",", "3"}], "\[RightDoubleBracket]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.746277220498541*^9, 3.7462772306265063`*^9}, {
  3.7957836648332744`*^9, 3.7957836929520903`*^9}, {3.8074553441301775`*^9, 
  3.8074553446415358`*^9}},
 CellLabel->
  "In[248]:=",ExpressionUUID->"04ba8008-032b-4069-a36c-a5069bddf733"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Normalizing", " ", "the", " ", "data"}], "*)"}]], "Input",
 CellChangeTimes->{{3.8074553798991375`*^9, 
  3.807455393272333*^9}},ExpressionUUID->"cd1c9977-1a17-47ce-aaea-\
4f74da40ffcd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"xTrainStandardized", "=", 
   RowBox[{"Transpose", "@", 
    RowBox[{"Map", "[", 
     RowBox[{"Standardize", ",", 
      RowBox[{"Transpose", "[", "xTrain", "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Mean", "[", "xTrainStandardized", "]"}], "\[IndentingNewLine]", 
 RowBox[{"StandardDeviation", "[", "xTrainStandardized", "]"}]}], "Input",
 CellLabel->
  "In[252]:=",ExpressionUUID->"4944b110-c99a-45c8-a2db-669b0d8d826d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "9.912071163853398`*^-17"}], ",", 
   "2.0605739337042904`*^-17"}], "}"}]], "Input",
 CellChangeTimes->{3.8074589470635357`*^9},
 CellLabel->
  "In[255]:=",ExpressionUUID->"140ab8e4-6173-4ad5-8479-0d53ba0673d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "9.912071163853398`*^-17"}], ",", 
   "2.0605739337042904`*^-17"}], "}"}]], "Output",
 CellChangeTimes->{
  3.746345856246685*^9, 3.7957492046095057`*^9, 3.795777547135064*^9, 
   3.7957837041421432`*^9, {3.795794104549325*^9, 3.795794110789633*^9}, 
   3.795799627264186*^9, 3.7958009199960337`*^9, 3.7959667552421217`*^9, 
   3.8074574935256276`*^9, {3.807458015234997*^9, 3.8074580197648215`*^9}, 
   3.8074585706208396`*^9, 3.807458657605441*^9, {3.8074589309606843`*^9, 
   3.8074589471839333`*^9}},
 CellLabel->
  "Out[255]=",ExpressionUUID->"c9b68bba-c50a-4050-92a7-af197287211e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"xTestStandardized", "=", 
    RowBox[{"Transpose", "@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"xTest", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "i"}], "]"}], "]"}], "-", 
          RowBox[{
           RowBox[{"Mean", "[", "xTrain", "]"}], "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/", 
        RowBox[{
         RowBox[{"StandardDeviation", "[", "xTrain", "]"}], "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "2"}], "}"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Mean", "[", "xTestStandardized", "]"}], "//", 
  "N"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"StandardDeviation", "[", "xTestStandardized", "]"}], "//", 
  "N"}]}], "Input",
 CellChangeTimes->{{3.746277350253953*^9, 3.746277351860874*^9}, {
  3.7463332965974956`*^9, 3.74633329690903*^9}, {3.7957837177497463`*^9, 
  3.7957837379746294`*^9}, {3.8074554301350822`*^9, 3.8074554317063375`*^9}},
 CellLabel->
  "In[256]:=",ExpressionUUID->"d123a4bc-bd77-438a-a82d-ae6223069771"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.015102702546000551`"}], ",", "0.01909233619639757`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7463459368314037`*^9, {3.795749208327387*^9, 3.7957492155385942`*^9}, 
   3.7957775515661793`*^9, 3.7957837404050956`*^9, 3.7957941186037283`*^9, 
   3.795799636890545*^9, 3.795800928034528*^9, 3.7959667628927827`*^9, 
   3.8074575027748365`*^9, 3.807458027735711*^9, 3.8074585770312595`*^9, {
   3.8074586148090963`*^9, 3.80745861723203*^9}, 3.807458664555209*^9, 
   3.807458952134059*^9},
 CellLabel->
  "Out[257]=",ExpressionUUID->"7fca1ccc-f1ed-4eba-888a-b579c99ba4c3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.0009367225384114`", ",", "1.0071624411409075`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7463459368314037`*^9, {3.795749208327387*^9, 3.7957492155385942`*^9}, 
   3.7957775515661793`*^9, 3.7957837404050956`*^9, 3.7957941186037283`*^9, 
   3.795799636890545*^9, 3.795800928034528*^9, 3.7959667628927827`*^9, 
   3.8074575027748365`*^9, 3.807458027735711*^9, 3.8074585770312595`*^9, {
   3.8074586148090963`*^9, 3.80745861723203*^9}, 3.807458664555209*^9, 
   3.807458952138569*^9},
 CellLabel->
  "Out[258]=",ExpressionUUID->"836154cd-8cda-4799-952c-78fd4f36359f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"train", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"xTrainStandardized", "\[LeftDoubleBracket]", 
       RowBox[{"i", ",", "All"}], "\[RightDoubleBracket]"}], "\[Rule]", 
      RowBox[{
      "yTrain", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "trainN"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "train", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"train", "\[LeftDoubleBracket]", 
   RowBox[{";;", "1"}], "\[RightDoubleBracket]"}], " ", "//", "N", " ", 
  RowBox[{"(*", 
   RowBox[{"Show", " ", "first", " ", "sample"}], "*)"}]}]}], "Input",
 CellLabel->
  "In[259]:=",ExpressionUUID->"9263549b-3447-4082-97c5-9395b292de8a"],

Cell[BoxData[
 RowBox[{"{", "80000", "}"}]], "Output",
 CellChangeTimes->{
  3.746346013787902*^9, 3.795777558181481*^9, 3.795783752192561*^9, 
   3.7957845628424916`*^9, {3.7957941271073856`*^9, 3.795794144932476*^9}, 
   3.795799647286901*^9, 3.795800939868869*^9, 3.7959667702542095`*^9, 
   3.8074575119015217`*^9, 3.807458036339287*^9, 3.8074586242555137`*^9, 
   3.807458667214796*^9, 3.807458960494542*^9},
 CellLabel->
  "Out[260]=",ExpressionUUID->"a7ef9559-778e-4bd0-b58c-8875d98b42c2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.34968511871816`", ",", "0.3464782957010875`"}], "}"}], 
   "\[Rule]", 
   RowBox[{"-", "0.353125062016771`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.746346013787902*^9, 3.795777558181481*^9, 3.795783752192561*^9, 
   3.7957845628424916`*^9, {3.7957941271073856`*^9, 3.795794144932476*^9}, 
   3.795799647286901*^9, 3.795800939868869*^9, 3.7959667702542095`*^9, 
   3.8074575119015217`*^9, 3.807458036339287*^9, 3.8074586242555137`*^9, 
   3.807458667214796*^9, 3.8074589604965286`*^9},
 CellLabel->
  "Out[261]=",ExpressionUUID->"31161171-d77d-4f37-b7da-2608db58bfa7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"test", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"xTestStandardized", "\[LeftDoubleBracket]", 
       RowBox[{"i", ",", "All"}], "\[RightDoubleBracket]"}], "\[Rule]", 
      RowBox[{
      "yTest", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "yTest", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "test", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"test", "\[LeftDoubleBracket]", 
   RowBox[{";;", "1"}], "\[RightDoubleBracket]"}], "//", "N"}]}], "Input",
 CellChangeTimes->{{3.7957845252231364`*^9, 3.7957845459247494`*^9}, {
  3.7957996645362425`*^9, 3.7957996855828905`*^9}},
 CellLabel->
  "In[262]:=",ExpressionUUID->"e4b30493-bebf-4a4d-b4a2-8d574d2a5bdd"],

Cell[BoxData[
 RowBox[{"{", "20000", "}"}]], "Output",
 CellChangeTimes->{
  3.746346093111627*^9, 3.795749262847025*^9, 3.7957493095309396`*^9, 
   3.7957503753250723`*^9, 3.79577756945133*^9, 3.79578376216792*^9, {
   3.795784510862567*^9, 3.7957845524761953`*^9}, 3.7957941477749133`*^9, {
   3.7957996553003273`*^9, 3.7957997003004007`*^9}, 3.7958009495180826`*^9, 
   3.795966777989643*^9, 3.80745752223938*^9, 3.80745803987848*^9, 
   3.807458631326007*^9, 3.8074586738942447`*^9, 3.807459038964702*^9},
 CellLabel->
  "Out[263]=",ExpressionUUID->"b3ecf1c6-809e-4205-86ec-4399c05cfcf7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1.4032424865391693`", ",", "1.4639583430285117`"}], "}"}], 
   "\[Rule]", 
   RowBox[{"-", "0.197599603714153`"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.746346093111627*^9, 3.795749262847025*^9, 3.7957493095309396`*^9, 
   3.7957503753250723`*^9, 3.79577756945133*^9, 3.79578376216792*^9, {
   3.795784510862567*^9, 3.7957845524761953`*^9}, 3.7957941477749133`*^9, {
   3.7957996553003273`*^9, 3.7957997003004007`*^9}, 3.7958009495180826`*^9, 
   3.795966777989643*^9, 3.80745752223938*^9, 3.80745803987848*^9, 
   3.807458631326007*^9, 3.8074586738942447`*^9, 3.8074590389715185`*^9},
 CellLabel->
  "Out[264]=",ExpressionUUID->"81ae990c-fa51-4ce8-9e03-fcd7537a2e7a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.3047552205227433`", ",", 
     RowBox[{"-", "1.1388604264767144`"}]}], "}"}], "\[Rule]", 
   RowBox[{"-", "0.607034282785124`"}]}], "}"}]], "Input",
 CellChangeTimes->{3.7957941562711735`*^9},
 CellLabel->
  "In[113]:=",ExpressionUUID->"6d50c963-4d65-4f5a-8ffe-170ecfa40b2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.3047552205227433`", ",", 
     RowBox[{"-", "1.1388604264767144`"}]}], "}"}], "\[Rule]", 
   RowBox[{"-", "0.607034282785124`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.795794156416786*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"ff7584e3-dc23-4557-8fd9-3c5deb185312"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.7797882489403849`"}], ",", "0.10372112993392912`", ",", 
     RowBox[{"-", "0.11630626794584462`"}], ",", 
     RowBox[{"-", "0.5511119722191015`"}], ",", 
     RowBox[{"-", "0.9074918357138656`"}], ",", "0.21174716158966625`", ",", 
     RowBox[{"-", "1.6068020382128585`"}], ",", "0.801765533410605`", ",", 
     RowBox[{"-", "1.0444984977798342`"}], ",", "2.1106413897150946`"}], 
    "}"}], "\[Rule]", "6.6`"}], "}"}]], "Input",
 CellChangeTimes->{3.7957771459759254`*^9},
 CellLabel->"In[98]:=",ExpressionUUID->"ec2f488b-c4a4-4a12-88ae-3b037cbfc00c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.7797882489403849`"}], ",", "0.10372112993392912`", ",", 
     RowBox[{"-", "0.11630626794584462`"}], ",", 
     RowBox[{"-", "0.5511119722191015`"}], ",", 
     RowBox[{"-", "0.9074918357138656`"}], ",", "0.21174716158966625`", ",", 
     RowBox[{"-", "1.6068020382128585`"}], ",", "0.801765533410605`", ",", 
     RowBox[{"-", "1.0444984977798342`"}], ",", "2.1106413897150946`"}], 
    "}"}], "\[Rule]", "6.6`"}], "}"}]], "Output",
 CellChangeTimes->{3.795777146113555*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"a495a4ec-b63c-4c94-b7c3-536c9b66c6f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Creating", " ", "the", " ", "network"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"net", "=", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "20", ",", "Ramp", ",", "20", ",", "Ramp", ",", "20", ",", "Ramp", ",",
         "1"}], "}"}], ",", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}], ",", 
      RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.74627749894011*^9, 3.746277576894614*^9}, {
  3.746333212087121*^9, 3.746333229821639*^9}, {3.746338685892082*^9, 
  3.7463386914114656`*^9}, {3.7463391930189304`*^9, 3.7463391943772717`*^9}, {
  3.795783825144392*^9, 3.795783847974351*^9}, {3.7957997146578984`*^9, 
  3.7957997259776516`*^9}, {3.7958007664254107`*^9, 3.7958008042861347`*^9}, {
  3.795800848466923*^9, 3.7958008534654408`*^9}, {3.79580113433829*^9, 
  3.795801163245226*^9}, {3.8074555330427866`*^9, 3.8074555653695126`*^9}},
 CellLabel->
  "In[265]:=",ExpressionUUID->"1c54c94f-9500-4b61-976c-a322b3384646"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 2}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 20}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 20}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 20}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "12.0.11"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.795749268986189*^9, 3.7957493397813845`*^9}, {
   3.7957501071561127`*^9, 3.7957501132787437`*^9}, {3.795750307363177*^9, 
   3.795750331045487*^9}, {3.795750366397954*^9, 3.795750397993411*^9}, {
   3.795777629456797*^9, 3.7957776433416505`*^9}, 3.79577767524829*^9, {
   3.7957778119465804`*^9, 3.79577783412724*^9}, 3.7957837790278106`*^9, 
   3.7957838505265326`*^9, 3.7957846848211718`*^9, 3.7957941646278377`*^9, 
   3.7957997291710725`*^9, 3.7958009596323566`*^9, 3.7958011664127493`*^9, 
   3.795966787095106*^9, 3.8074575362948055`*^9, 3.807458047793132*^9, 
   3.8074586818995295`*^9, 3.8074590473855815`*^9},
 CellLabel->
  "Out[265]=",ExpressionUUID->"46442e11-9a2b-4731-a116-d8cebc5c683b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Initializing", " ", "Weights", " ", "and", " ", "Biases"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.80745563944188*^9, 
  3.807455664258562*^9}},ExpressionUUID->"df41c7e5-1e9f-4b81-82bf-\
598812ed1b9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "[", 
   RowBox[{"net", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<Random\>\"", ",", 
       RowBox[{"\"\<Weights\>\"", "\[Rule]", "0.01"}], ",", 
       RowBox[{"\"\<Biases\>\"", "\[Rule]", "0"}]}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7463386606941433`*^9, 3.7463386798768435`*^9}, 
   3.746338895658247*^9},
 CellLabel->
  "In[266]:=",ExpressionUUID->"67961a98-d963-4c9e-8c8d-9e70ed91848e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "12.0.11"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7463462982350855`*^9, 3.795749235012165*^9, 3.7957493429574056`*^9, 
   3.795777844091582*^9, {3.795783771656489*^9, 3.79578378217036*^9}, 
   3.795783853551426*^9, 3.795784695652152*^9, 3.795794172582505*^9, 
   3.7957997412946405`*^9, 3.7958009737890434`*^9, 3.7958011711061544`*^9, 
   3.7959667988076982`*^9, 3.807457543192537*^9, 3.807458050322016*^9, 
   3.807458684673924*^9, 3.807459055666645*^9},
 CellLabel->
  "Out[266]=",ExpressionUUID->"dfb3d13b-c5a1-4536-aae4-818fdb319b11"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Training", " ", "the", " ", "network"}], "*)"}]], "Input",
 CellChangeTimes->{{3.807455786754305*^9, 
  3.8074558021756697`*^9}},ExpressionUUID->"241ab528-8ace-4a96-9deb-\
8433347eb8de"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "train", ",", 
    RowBox[{"LossFunction", "\[Rule]", 
     RowBox[{"MeanAbsoluteLossLayer", "[", "]"}]}], ",", 
    RowBox[{"BatchSize", "\[Rule]", "32"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<CPU\>\""}], ",", 
    RowBox[{"Method", "\[Rule]", "\"\<RMSProp\>\""}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "25"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.746277662484333*^9, 3.746277672147027*^9}, {
  3.7462777314033546`*^9, 3.746277733827132*^9}, {3.7463393175313196`*^9, 
  3.7463393536975765`*^9}, {3.7957779010412254`*^9, 3.7957779037001114`*^9}, {
  3.7957780069808016`*^9, 3.7957780205285606`*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"65a8f121-40f7-42c8-8cf9-bb6c63b6c0d1"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "12.0.11"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.7463464174673233`*^9, {3.795777909713022*^9, 3.7957779180078325`*^9}, {
   3.7957780114807644`*^9, 3.795778025335698*^9}, 3.795778206536463*^9, 
   3.795778470453556*^9, 3.7957786301691055`*^9, 3.795783902353832*^9, 
   3.7957847519615083`*^9, 3.79579427001778*^9, 3.7957998509293613`*^9, 
   3.7958010910470734`*^9, 3.7958012704121323`*^9, 3.795827446487166*^9, 
   3.7959668931695194`*^9, 3.795967715876689*^9, 3.807457641493806*^9, 
   3.8074581384115124`*^9, 3.807458769554242*^9, 3.8074591365208855`*^9},
 CellLabel->
  "Out[267]=",ExpressionUUID->"1b92fc13-ef7f-4a32-83c2-5c3a7ad7e7fa"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "12.0.11"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.7463464174673233`*^9, {3.795777909713022*^9, 3.7957779180078325`*^9}, {
   3.7957780114807644`*^9, 3.795778025335698*^9}, 3.795778206536463*^9, 
   3.795778470453556*^9, 3.7957786301691055`*^9, 3.795783902353832*^9, 
   3.7957847519615083`*^9, 3.79579427001778*^9, 3.7957998509293613`*^9, 
   3.7958010910470734`*^9, 3.7958012704121323`*^9, 3.795827446487166*^9, 
   3.7959668931695194`*^9, 3.795967715876689*^9, 3.807457641493806*^9, 
   3.8074581384115124`*^9, 3.807458769554242*^9},
 CellLabel->
  "Out[218]=",ExpressionUUID->"0d973082-e917-4400-95fc-0852e6f6bade"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "12.0.11"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.7463464174673233`*^9, {3.795777909713022*^9, 3.7957779180078325`*^9}, {
   3.7957780114807644`*^9, 3.795778025335698*^9}, 3.795778206536463*^9, 
   3.795778470453556*^9, 3.7957786301691055`*^9, 3.795783902353832*^9, 
   3.7957847519615083`*^9, 3.79579427001778*^9, 3.7957998509293613`*^9, 
   3.7958010910470734`*^9, 3.7958012704121323`*^9, 3.795827446487166*^9, 
   3.7959668931695194`*^9, 3.795967715876689*^9, 3.807457641493806*^9, 
   3.8074581384115124`*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"86d491d8-0a0a-41dd-9c74-6f31e73b3048"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "12.0.11"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.7463464174673233`*^9, {3.795777909713022*^9, 3.7957779180078325`*^9}, {
   3.7957780114807644`*^9, 3.795778025335698*^9}, 3.795778206536463*^9, 
   3.795778470453556*^9, 3.7957786301691055`*^9, 3.795783902353832*^9, 
   3.7957847519615083`*^9, 3.79579427001778*^9, 3.7957998509293613`*^9, 
   3.7958010910470734`*^9, 3.7958012704121323`*^9, 3.795827446487166*^9, 
   3.7959668931695194`*^9, 3.795967715876689*^9, 3.807457641493806*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"837673e9-82ac-45d6-8af9-b3c97c42703a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {8., {0., 8.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {16., {0., 16.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{20, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 20}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT], "Type" -> "Scalar", "$Version" -> 
                    "12.0.11"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {236., {92., 100.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.7463464174673233`*^9, {3.795777909713022*^9, 3.7957779180078325`*^9}, {
   3.7957780114807644`*^9, 3.795778025335698*^9}, 3.795778206536463*^9, 
   3.795778470453556*^9, 3.7957786301691055`*^9, 3.795783902353832*^9, 
   3.7957847519615083`*^9, 3.79579427001778*^9, 3.7957998509293613`*^9, 
   3.7958010910470734`*^9, 3.7958012704121323`*^9, 3.795827446487166*^9, 
   3.7959668931695194`*^9, 
   3.795967715876689*^9},ExpressionUUID->"1ed44493-30dd-4cbc-9074-\
96ddf0bb557d"]
}, Open  ]],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.7957843761658783`*^9},ExpressionUUID->"57e97210-a87d-46a8-b99d-\
1bfa87bc7790"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Testing", " ", "the", " ", "model"}], "*)"}]], "Input",
 CellChangeTimes->{{3.8074560041790924`*^9, 
  3.807456011410839*^9}},ExpressionUUID->"a49c4187-0a0c-4789-bc01-\
24ba7d179507"],

Cell[BoxData[
 RowBox[{
  RowBox[{"predicted", "=", 
   RowBox[{"trained", "[", "xTestStandardized", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.74633380472955*^9, 3.7463338056441393`*^9}, {
  3.7463343782068853`*^9, 3.746334413747841*^9}},
 CellLabel->
  "In[268]:=",ExpressionUUID->"fb711d0a-74b6-4489-bcc5-062b1baf0949"],

Cell[BoxData[
 RowBox[{
  RowBox[{"actualPredicted", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "yTest", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], ",", 
       RowBox[{
       "predicted", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "yTest", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7463345071979218`*^9, 3.746334517332376*^9}, {
  3.746334564693718*^9, 3.746334630339768*^9}},
 CellLabel->
  "In[269]:=",ExpressionUUID->"3055bd86-2014-40e2-926e-e6f222c1f45e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"yTest", "\[LeftDoubleBracket]", "13", "\[RightDoubleBracket]"}], 
   ",", 
   RowBox[{
   "predicted", "\[LeftDoubleBracket]", "13", "\[RightDoubleBracket]"}]}], 
  "}"}]], "Input",
 CellChangeTimes->{{3.74633467531349*^9, 3.746334683568411*^9}, {
  3.7463355803818455`*^9, 3.7463355920277042`*^9}, {3.795784830683947*^9, 
  3.795784846357969*^9}, {3.795794299666459*^9, 3.7957943231211853`*^9}, {
  3.795794411270628*^9, 3.7957944237018867`*^9}, {3.7957945543732758`*^9, 
  3.795794595914235*^9}, {3.795799875731744*^9, 3.7957999472246885`*^9}, {
  3.7958013316065383`*^9, 3.79580133485388*^9}, {3.795801585298937*^9, 
  3.7958015991608706`*^9}},
 CellLabel->
  "In[270]:=",ExpressionUUID->"8355e2ed-0fca-49b7-b9df-7ba9f53944ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.86327672298563`", ",", "5.002091884613037`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7463465066691256`*^9, {3.795777933291944*^9, 3.7957779523589334`*^9}, 
   3.7957785008901715`*^9, 3.795783921851713*^9, {3.795784820995865*^9, 
   3.795784853705312*^9}, {3.7957942903543744`*^9, 3.7957943250808973`*^9}, {
   3.7957944169863033`*^9, 3.7957944257011414`*^9}, {3.795794561368594*^9, 
   3.7957946001159773`*^9}, {3.7957998689648843`*^9, 
   3.7957999491525273`*^9}, {3.7958011111642556`*^9, 
   3.7958011250112104`*^9}, {3.795801328379201*^9, 3.795801337273381*^9}, {
   3.79580159006522*^9, 3.795801601720043*^9}, 3.8074576683513536`*^9, 
   3.8074581544386806`*^9, 3.8074587873551297`*^9, 3.807459150750969*^9},
 CellLabel->
  "Out[270]=",ExpressionUUID->"2200603b-5ead-4c73-bdf3-c6e24eda28e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"actualPredicted", ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Scatter plot of actual vs predicted values\>\""}], ",", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", 
      RowBox[{"-", "1"}]}], "}"}]}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Actual\>\"", ",", "\"\<Predicted\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7463351630276856`*^9, 3.7463352779005184`*^9}, {
  3.79579435791135*^9, 3.795794360818601*^9}, {3.7957944434544845`*^9, 
  3.7957944710864534`*^9}, {3.795796519899126*^9, 3.795796526359294*^9}, {
  3.795799978217923*^9, 3.7957999831058226`*^9}},
 CellLabel->
  "In[271]:=",ExpressionUUID->"586b5715-27d6-4f35-8ef6-e027b0ce5b81"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[1.6], 
     PointBox[CompressedData["
1:eJxMXWlYTV0UvpVSVMoQIqJMoUJC1L4UQqYvZagIJUooyZC4phQhkilSUpmH
Bill3UYpaZ6nc69KpHlG+q69PE/nV/Zzzj17WsO73rX2NmHH/v9sxTkcjuoa
DufvX5ncvHstKz+C6J+8sOgPMN82dL6peCsRtbmWSm1kqVPYhec3v/1tM4tC
v5HZ+d9/dBzL+/s+vzYgF8L41Zp+84V/24EqlkLw9ykzW2p34W+bExjtA9a7
9I4UV/fQ752+3UP0jW/oGU4W0N/v4QjAyK8k0fQ+bQfuEhPCy/SVWhoLcv62
ueqjssFxoMRmPSX6fa5eiwAGKLlbJh/v748cn5395+AwrqhtrS4+nLvmz3lD
/vYS+v3fp8rhwvW4WWFGuX/7583i55DgmuSiEEk6P87s8a3k+BfVtJQAwd+2
6rEBQuJiev3K9Y+0f86FzhyIsWcuZRuK//2+qnqFGDf1iLbXOwns33WaEB4l
7+FKn+4fj4m/8a+5OYm0P3mJNLLl6ohv6Rv6n4f4uFRvMqmi41scWQkjFhqo
xaXR9Q20+v6NjN2bbdlrwtD1Xs8XkmddjtnKJ/t/zytrche+q/zbZrpKKkFK
ttjguFX/82+6aYYqvXJ/x8t5pivHbX94WFEqiqHzMQ9jQKzFpl7JpZDu96Vl
hdAZFC4mlkTXn3mYJYAgU17A6/F9dH06y/+QzpBr4z0J/r7uJgM5+z/0SK3r
72/4sRizJxv72zu/WTUe5/W3TYstbL9/kP07Hm60mSx3+TynC3U7S/8+V72z
uhRKVCKz3mo8o99ffT0ENj7bbDOSNV+hylDjp7/xfVWZUpgTFesex9r/Q8V7
5v9SouPnnPnBgNSMaLuGMLr/1hYVxfB7+9xlwkH0fd5tWSEErXNkJp9zpvPb
4HmNfItKWs9LofNT5b5k4IL51oYSsQr6vuzCcph+IHy8yrJ3tO3xNhruDLb3
lrGg+2Nd9pAhP+Y7lBdXNlP5Dv/ZTJpi3ocZWqF+PF+cB9l+A+xu6dP+Oekr
hCA9pcFqVBbtL1D7NwNbvtSWh1dL0v1aHSTJzR+QOtlfv39+l1Tcwx+w1jNd
TL5ae1t/e4ZyiduFkqK//fOnuRSTxS8nTVs/g36ff1iGgQl+jOkCpzLaf05o
KeheVtfNWj2E7seGAUO4xnVbvqVuw/c9qxiI/Nm5Knlf//f/W/5ewWAQ1Rde
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
UeA39Cf6+8pcBn7Vd70dYt//fdkV63Vsl9RQ/RgjVUt6Zn3aPoDl34al5993
m4fxQOHMXNDePClgayPiQ0aKIX69eqFKFah/zlECiOqWPvYpjuo310u+DPzr
O7ftWIZ45aM6Axa1DwfqOVI8a33rSj5UQ2CvVE01Xe8V2jUke23g1u7zOVSe
hpfkkZ9zX6y6YNM/nt9lI07d78yn7eolBVBjErmXx7LfRg909att+9tVF4tb
5FnxT9D9jj9N5RQPcC3E28nVj9JDLu6i+8db8qEQ6lqnjHwLyD/Y36uC/Irr
b6+/SqTt3MQEMJdK/WV0rP97v0ZGTHwQTvWLe0WviNQ6uKsaydL1tx4jXghF
0jdGXNDsf99duV7qolt/++iOiJ3pOajPgyqLYNy8fZ+aWf5su4FvbMyy/rZu
QOzB4Jp4ut/GCfGQdKOkw7Ks8W//gVJuTcQ5ZzxwpTFeuR9QAcnRVrUjB/yg
6zs+8QepcPxipGljR59nW3mTjXdNN365QP2X9agzZdC95E9b+JH+/kbJfHkY
1EnHx5s3phiuSiwVN8vtpfPlzO8l4sYjfyRoI368eTSTBPdWZ8tMQHymqVoG
Sv750R+HIt9laVwAZ30+hFu8pvJgPSGEgam7VA88z0P/n56dBltXFRSMVaL4
gJO+ZiC3KvhMrXIv9Z8ctQmRYDl+Uqe0EfIfZntKwSrq0LznrP3PHPj+UvUc
yh8ybfeyISp90XlHFv6yHDi21N4V5fHHaQaK7l6Mld33gep3RWMGeXG5THoT
i0/MU5w1zeYn+teTqbkQ9PnT2nFSX+l6Kzl/JS8/nkgUu5dJx1fumQm3tDtT
OzT6fx8p2bk8aDsr3j5+prkiB/nHp95VYLVIy9iwFP397s8MJGqF/Dxyl8of
N+duOWg2WlTM2dJE90/SuImkr/4ZOjED48OyRwLw+nT85WsdabpeHwXS3CAf
XZXeYtTHldkCWBisOlq95jvV76SQejJH8sLUncfQXpwyE0CPk23gcJY/y10c
Zn2Fi/ZQWhRv2EhUnTUxR75B174UtlS+rZ14mMUHBTpG6d1E/x9xh4Gw+YNS
HrDsx9PYR9xxaWjvGBcBaKRskT93Bf2LrJcAJqqS239Y/OWJc7zNQ1ZSvphr
apxPQsq8271Y8mh24vrR96x4beLduAkWLDxXurVi1zYz3N+ypQxsVzQ8dtO8
//kHmzSfoNV0vzmPFD8QXrF88uj5GA++GctA+4i0sx/X9r+/9YrCUbtqKk+B
xaJ4cGtESGbhEqoP1mM3l4Glm3dxJKv/iRXPZFKCUJ+C3MtBQq/UYsdYjH/5
dsUw66qx2rqSUipvO1vKyJj67ZV24xCfyojse9LYdxWBe6g9YngBIntUapHd
ekyM7u+QQ2Lc8DcjM/Pmfqby0XbqEww3N86Jv5xBv3f++Gcy1PbY7UN1iCe8
RPae+an+tW8otde8uVcqyezKAyPW12N+4fLyNvJnO7P0y1YW36kbbqkf3E79
s0J8O1GpUV8wgoU3p/z+vfigL7W/3JbQPDg0aGDf0lRqz/n72/PhaV+iacTM
93T9V8yKg92NiwKyxv+i670u4yc50/zR7eoEai85oWal5Ed31+y4Uwl0/p4G
fFgydUjUEVZ/Ft91738Up22mXoSHZvmpnFzJ4jfAzS9NhTPo7/rwN0XIcMsv
Rg77uRPx7/2gYuhZFLYsFOVRNU2E434laClEBFD94mjcrADZDmuz/zRc6XiG
d1wjTU2cauNjyfS5RFIi7IzvOf+0nY6Pp18DMME/am3yYTp/vmFtHtSFDFSR
ZsnX7IxfLs+TKX5QXXmyjoSd82uZW0b7U21pLYeE+poZMSz/5FdR6pKRh/p6
fI8ADE6u6Xqjivwjc6EYHKPvvZM9lkn3r/HKJyK9sHNg2kfU57r870Rxp13b
p3VoT+MIA7OPRLYuwf44KcuqYIGn5oEk03/xcngZTBFe0Vntjvo/wEIASvbO
FjPlqL/gBa+sgGVHO1258zE/UzOolVzZUlnKm436XVVfBRuCD6i+jkV89F3p
K9k769PXGzmoHzOas6FoThePy/K3MqqcySoX0L658hjI3hbxuXY95TdUewK+
kEGBMU4mrP0cMS959tsaytfyo6KLyM7QS+0SyCfwqs5XkJAxjvwCln/8rTZs
aATaO8Y0WQCtyrkBgx5SfVE1u8XhNi78OsD3LeVfeE9v50CM0G5L5TUa7/Dm
TCgFcZfptYksez9+QUBzjvbIv7+33qgwiruZ+6jZfT/Lfk+SVB6MfGRglSi+
H7xCYfjdJxR/cr9+riJ999wWX/4YTtfXQfIliI3x1LnKwnMjDkVfVplH5x+4
6MQXYvrYqGwCy389dJ708zULX6RnhV55d5vyObwdMR2kPnNX2J/xinR+YecU
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
U+i/eywaSY3rhXQnuev0e8MX3SBKepGnnvw7r7z1WwX0jfly6Opq5GtTz0WC
itu+MUeP03p3blhkJSk/E//d5BHN9/PuXmomJyDI/e4Jul5cH60qMnH37VFm
rPxx3piGjrHeGC+reWTDQ4d7ncY/kX/ZXij6Gz5qJJsPavS5QmxZ9kAiy7Rn
LiveLHNvMC5lte+7K21z/4X58wmapdA9wtV3dTLGl5N8K2D0zG+ag1nyszLG
33bEDjwf8jSkBHibF/K2+1C8yncd3EfqfQ/ZXxmE/J93QxVkFBt1qrLG12Al
yecEYL1sjvkPYv/ULXjWVxqfclf8ygaX1bDIyxfx7ZGbIv9Zr/ii4tVBtM+n
l8LsydN5XbooH2vkBVB6cdr5WFb9x9TVs1cfCEP9iXQXwL7Xh101WPN9pfk8
xmso2rehFQzINNgrX7t5k/bXPOgc3JwvqN+wDc/Lud0tAsflJlPeemB/ZXsE
MOrAfzq+j7HezCu0HPYl9cxRjMR8UOCRREhRmOETxcIf7k+ldgVgfkF1zBsG
NN7m2ku7Yv2S95WX8Pp8gkKGNsZTkiJ7V3csJ2Iv2rNAhQVCGCZ/Yv/DlYin
FH7Jcjvj8yRmnKP8By/ohRyXv7fHdTgLL0iEddU9f4982ZSjVXB4YFzIPJY8
MIIN9hFj0d+lxfuRWfeqY9fdwPNb2d2tpPy3QG3zDXH6/UZ/ce4A11MSfcOo
fnF0h5WBa49sQiTLfkfww5ckJ6L9P3OfAam387UCgtG+Roni+fMr/ijtwvgm
8Lq6CK+VhiwaNB/jw+j89+Ssv/WK2A0YH9yNvguHjCp++eF5PFUNfQE8KX56
7/IJ1EdPvQ+wW6Jbd/VQrG8ZrZ4Hdab+3j/OYHz+dswv0jPdtqEOz1PxDg0U
gOzWkrHXWfOPye/UsmbJ4zzVB/vuHUK8l3qCAfEC0yEXnWi9GZN2Q0CG7vNZ
Xof8FHND9PeBQKXRtxXbn3cIYcjCiP1KrPMOomi02ukLxpNSU2vJH4MfOSY8
zAdHaiTDsZ7SazPY/OqJYdkmzahvVxrKwSFVSXPXTjxfoMQthPtR01Z81kF5
/OBZBHL7mqQdlbB/pWEMuL58w/ObT+WBe+G8PFfe31j7nTTmO8NKBaB+XWPV
vF2IX9dsLIOTe3rcn+Ti+syIEMCv23mthf/y03aLhHB568ANL1jzicm6/PXm
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
RPvlX0O9XfbbpYWwSl1gfeRT/v6mK6SroaBGbKwVG/UehVr+knxq1z5P1FN3
V63ggubes7r533G+0BJbMao4calAyz7s95Wz/ENUNka2KSO/ibXRh3ee0tYs
nT/av+ubSMOMew9crp/gz2tWkv8zhSLp5i+/MfCYmPib88nCOJ/0i3w6fN3i
8gEOYv6+5COL+in9/qNbLNZbNB2K4IRA/s9urIdxpm7k4bODH9XZG/j9Caxi
Mw7x2TZ5tmIu8pHpiXUwve2Zm3IV6qPHLYwhw+u+ZLsw9rfhSv3XQ+8wn2e6
tBwyrv2cpOCP/B2b6K9kTftMCckq5B9L69SDvpG22nIZ9JfFiz8QaeuEhBRG
v5JAZVVb1g+Md4Mu1IBucpLtu++In3QfdJKLHtqZ/c+QD+p8i0vm3BjjU8Xg
G+tIOCS2XcT9WnyUCzVPLRT+IJ+SPdaah49dFnMSUtEeg0ca6Cz8cIJ9HPXR
FupVkg8XYuUO4vxKyoznf5sKdeW0nJCfFj6pBq46Lf3cPlpPbf9Ew4MHLq0Z
bLzenN3VECC3PT+awVf+dOBOR3oT1o/VBUtJ9ZK804IM/t4b+f6rWYz417l2
sta3Uf3duQpcqDVqzo/Cfjl2RnE52KsmdMzrRn9+N4sLO8yrvPauwHjp0Bre
80hLLg5p4Z93zpUxxRCuSA8KhWF8fsIwjghtfqH49zb2N6jEF0HghpaYnTiv
leqLoCG/Yzxnz1/UrxVZX0hWaexfPk0J+UY9r2sgep1XDTzh7y92w3cWVaWr
mjZFDPd/58e/5OsFmbPjPvD9OauTLgG7dyVfalKQ7/CncojoHNJReXET/bvU
0zoIPvc57M1D3O+zd9Mg9/Ve5U5GP6iL2oKCVTi/lTaS4oLyvt/a5ox8zpmA
glpbV8y/z/5bTy5uOeZ71Qb1qM2aIsH/wgKRHNQnVbo2nWc/raCuWmwl/3qc
/4aTLX4WOoGM81T5WCW8M5mf71G6qSNBxd+ZYZF8Gvv9LQSzIHZXmPflJnw+
oWm85/M2rWl3LNY/c141E5eA+TsuRWJ9/+zWMtCdfski6RHyKcqupMMZh+xr
80PR3zme5cLppy+qFJCf6O4gXA2/wj9dXjsF+0G6pn0lL92kBAcY9ytaM2f6
3hE+X5/+/nkKlRUy6El54/wUG/E6eKWV5hpzHf3LtDouEa8NNNU8i/0gqZ9+
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
rp+snaZpMUnLnX9/drfukuvl+e0P9vPzPey65zQ5U/Hj46JCXJ9lr7mgo5ix
8xnyp1jHargQWr5ycvYavJ6BoTwiE6x7xx/52qyPu7kw4/7367YbMP4ruVII
NwV7D9hk4zxKqVdJ5Mzz+X5sPB/utC8XxqXXVMXiPDm2nAUXXPavfCpXjnyv
HR0ZZGtD6t7jtWgPpT7ScGOyxxzuqN7ovwAa2oLVjeZhPoalubQRyHShL38Y
fHU/M5i+7ycfzyqJz2ZRhwePx98t4O93WnZeK+m1kVCJ+oXzBq7y/LJiWZBX
5mTcj7a6USRz6Qz5qyrYX7tCNp48oz4P5FQjv3xTZwdRj+qzF9qC95+ox4Ws
l2dkHZZhP22lcQ3cWxBh1SuI/T52V2shdCtbQR75S6xxPLua2nVz1c7fuB6b
U7hwyts31w718Gg9cy6YHdSdcacG12dMBhcymjjf4jehfkbav2Ayoll/6kXZ
/+21bm7NiQRLnAdla1VEbnQvUDUyRfx2gF0MQ+9lRFnf0L5NFWoEE3vZphTk
kyiFKnFB7JRfbsFzxOs5ehXQdVv3sPBZnK8Sy/Pf97bEb9PC+jrrmkQjSE36
Nf4R1nfpKzy/0RqpaTLmFZ4n85Pv4eeXiUeTTmH+zPp5EVguqDTpvDKqH8rz
X+w4bYW/qch3qG/sJXHqmX7bTTB+E+L91bTWPDqVcV6m18nqimG/AFtmQiO8
W7VsS/Xo/ht/mQvzBPzTL0rx+QDUSGoyVC9QmL6YOT9XPuSNCuo/s258rAKR
sgVHdU/g+p6w4oL5si+2829hf5NKfiORMh4qeumM8+K6AttJv/qxSVHvBf/b
TyzOI0FqYcpPrZOzcb20d5RD1bGsK7Z3+fGsu+OcZKj13F13sg/jm4aEejgw
r7TzKiO/Mn6nTkEmI/6wN55otx35f2zDmzRM/NbJ/joV9Uume5XDPD1dTy2c
702d5vnNe5RsQ0Qw6hdFTewha0/seal8RZN/f5SzF4kcpzyXZtz/E7c9XjvP
/H+/uMxxG6ze9Z6/n06tfUdqzO6Kn2L082XlVJIsbdTX1mMVkneG1QtfzkB8
lub9g4QUxwgb7sTvO7+ShoZFvyXD/mE/2vneephaJi2lbYbnpWFCO/m4XVtl
aDXuN2MVLu/9k4aHGP5dJHWt0rhKvP+LvDg2S4hzcVgF+5HjiuphvdhL9vSt
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
wqSY9hv+6HnM5NkvJcWzHWS6+0oFhc08fTxWuEM6gZ39T5+0o57yQ3YEsXYr
6+13w/Xbr8Xdb5eXxJqiPozSGEWBdsDj460L/vf7ZieHd93F88tYG8eNz5es
mnsnBeOb2roGeJ/7XfPpFszvYtQpELyxOVDGD+9PIoOP+fzP9POK35G/aLO6
mJgUbohg7sP+5ZawFpJjUnZo1SPkB9ecyoVIP6d5PjR7aPXjkahBII//wUhc
XUhsHyh+3USzByPMZ43tNPxlrXxtzmKsP7NO91Gg4Vo9jw/tvZIQN97siRCf
1F6BfDg4Vg+d5TdvT8V5T4zs/Y2gmVggvjwS+1/uGbLBVlxDPgjnW7CPNXPg
vdlfKW+c38xSXNMIn7VNB0Ub8PxOT+OA8bze4CM0fNKuXkjvIeJb7Lvc63rv
NeKvjfPrlVbtpeCsUdCPfTR7FfvOja9yDtZbHpzPhVUzbC/Y0+rNlt0itQcx
Xlb6t4TrL06tO5yK9XqOv1IzNHMSujSuY37gKdoIJY1xB5bR7F236jUBsyz0
B70PKEgRLNnbhv3jDD3u/fn9vb+rzgjjvXubONDhx38kfh32v7XtbiZ193zW
6dfx8kPL+MxyeCi+tmUXvf/fbezMxjTkH/DfbgBTOCESxMbz8vJLC+mQF9Ap
p/FrN/jLDR4b72/1DaegQ3XVnKwW7I+M4QeiZ16x+oQB8p+2DeTA/kCVy29d
eHyiUAFPQeZz72mL707D+rPonXzYet919BLt++9s3S4ggfMcLfszKYCh+jdO
K2l4u6WXcmU79q9ZMovIw4msqpa1GF98a62ArB+7twxjfGWZwKGgcZd7tzTN
HwYYikf20+p92rmSa5tp661ZsmrCi2LePGNW3IIeIqi36tsXmr79nIa5y/3P
It4470EtHJdtvhwdgucz/yIHOCuumsRgf4ilrngzhE0/JlxC03dV1pf2t5NB
vPxW0ksYMv+ptmUR6rP8omrJh5thExW+8n7fstnxJ5n6Z3PYe9o8gwmmiwzl
cT5p6ENunPFl5m6jmQwe3sd6UpsMXRu3XVXF+hR7Ltf+fVSW5++5hPb240gj
TLILqCueifNJV1ycwJx07fc3a9p+GNz9bropxl/st+tbIFF+pbDL+LybT70U
rFN/XOMYxzuPHAX/ejAWkJJYkoJ8+NxnEky1Mc+pX1DfwlLlFQf67plyVqkj
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
zD2FiD+YWZxz8qKtZf1lzP/L/K//lbnfXTJkFuKTlvlsyA0pc1iryd1PtNEb
0+giuonl3s6oV6S4JBvu33F5E2SLfM1//cWQu7E2aSgX+XoRDXUwYnfPdj/q
IaU6abFBOOKQoizq76RqsOrgprHnTR86zscWGP9HEoWkvH0o8XCu30jcQZxP
a3YFmDCWKL/+SAD2W+Rp1kJDz3i5M0VPPo7Pa291O/JTso0aIGf+bI/H51CP
+0tzPWx0OHM6nJKP22QSaxyI8xZoea9YcGDrmQG1SX17Q865N6ri2269AfOj
Sj+/k29lpUKPJ/V+9/qxoK45YK0jJR9FRpfUxVVhPih3oJWobvk9K+c84p20
nSxQPXFTVuI+Ps//5sx/8bT+6o/nFU17vBB+vqSXqVhifvftZhY8PGhwo0kG
6yWxI2nQ/XnAytSey3dllH+NB+XPl80GsL8jIKiRCRGyEySMUl+PSOc18svC
/rujm5qJz6tOlZT9+P7FD9eDwvi/Rfkl2P+ieLiVxPSFztF+i/7kwJSfRGL5
z00zJ/XIHMJYcG05z3aNi8ifGRUvBz0ZqIyhvE+ZEzTFSneu/omMuloXeSE9
/pgxmT89dbIGKowGrqhWIp/gh8dMesGWk0UC9zBf1mdbA6K5Dq95vLBfl7G0
FCwEz6k/+YJ6PT8hkfy9PCNrwXUu/45+yrOfvGnquiIokIrrk59KlL4/2trv
i3gp804WpGxpkDXB/U0f5OAgG/loG3YjxquPvjFhGXv+Bu1Wbr5YpnyKIH1E
zETpDSXeKXubnLTwML7ft8s5++3LswW7XmJ82WfGhBmdH5ulrbj2wbDMziUb
jO89VqL4289dr6X7k7jxFi2X1kua5ZfMZFLOgwERIeepMvh+xTj7+o6ewTsN
c+Qr7nnCuX5owWt+1MtnBq7n4NN7uwUVJvPDGaHDRO7kzLVPkL/EcXAsMJf+
9FYF56XJJJcwIa7Le/PVOVi/lJaqhcTWqH3zkX/IrJPi4MWJ5pSWBejv8+V7
yZzbXkHOmeh/24yqwPHOgw8RNhgPPr9WQ9ZcUs9xWI31GRnHCuhWnnJX6TnW
34/kv4IHmanmCyf1DWK0C8HM+9OfVSmIFw0cu0jexUiF7bf+4xtr7l50oJIS
f47tyuh684LLn0j97pAGQldKNc9smuzXU2DB4cM9XQpHufYRoD9QAnLnLkz3
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
6Vd4+KaqZA+9nFmPjjcPSd6djpen/jH9IGrgUh6p3Ll4/p8y1AtrmfgZZmTP
X16D/EbuMmkezE3hzNk9CevL3CwPuHtqeLEEy36MLf08Vp3lT9UVL++dNw7r
I8/aamFGZFR73EsZxr7svStDTc93ey81g8lPqR0eklSPXc/gYhY+YtQoDc90
tH8Civw8Tl09+NHz98g/7DvVT5xMXqsVXMN87+HNOPhknDynDPWuvK/+puGy
7T6dn3dQvy3LMx8kLq7/tYZVTxB8yLvotxP3m5NNI+kKl860cGI+j+PZyQXN
/piIWsyX6TGDPCjaHjag957h43LOh/D9kKlF5QSWfZD11pN0CUQ9v9yWLzAU
YH7nweuRfFOjBvQ6618ljujhtPLzmsLHeSnqxzAffOBeAsohZXa6rP3G2bb/
firif7y5/DxtUriow13W/jO8Ea6jVY763T6CYWSamvpgzRy0Z5ef8ePXKav8
js9F/5HNjyvGHk5Z3FiI9Rc5ft6S2nSA2zgO+Wz9X9tJp3Z2U64t4l0H8mrg
yKTyzbNv4f5M0eeBgVief+8cxDs91a+BA9zzh0pY8clnq1EOqf1o7/tW8uMT
Gb3pkz1x/l1XVQHhtlz90vgT7ZmbfTk88xVS2BTD9Lu9F+4ToWbPulVazqpH
7os5M/Ec6iUqtrtW8/dTnYj8Hny/aWgZ+J4piNnI0iucPq4in1zA+tBzKxpq
TQSmr0X+GKf5Dw8OWLYuEnuK8d+b3RVkirq4dJMK5hsXDpSBhqv0vZtY/xfY
zMkkuR7K1nMPY/0/sa+I+K+VmteVz2Fed261Ii6eu/MkUR+E1nXnwdOPHLsX
fTi/cZ9+NhyfFSEUth3Pzzj+OWow+XT5qD7yTYY2C1I3JQ8au31m+kGcoQed
5MntrkUwMu98QwUPHJe/2F6MenCmR2/XQFDts1PfLiE+2qhBgmpr2bL2ANof
6uAlHqz5vPrpHuwH0oZ76yD24r21WqgfQ63jX5fGnwz0cEZ8gVGyCPWm/wlv
P+bXlKNRHfyS1jktcwTnSep4V8Hi0aa7PD4h36YmOJMkndML82Ptz01z569N
QjwS3XyQBxNv/wQrCVyPskoaHuydVDN75X//f2jD10ZLf9QfbJCLgeNG/req
DLEf2F5WDTrLf5Q9V8d6d1NpBpH64+h4cxnOBxmXmwUWnJVVZ3EeEh3BX1fq
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
MubY//w3HEqc7krc72XFC18XX58RU4rzn2rSBCi5/ra5rzFf50x8x4MDz3ae
P30nDP2ReATJD7exyPDF/dd6lgeRexPPFU1B/gmZWQEP1cwmiTUgXiLsVzfR
UfQR9g/H+rx+bgpYehaJFu/Bz/+1lgdb9Xeqmpmw7Pm0zJhOFt9xyPL7kyWo
j08vrKchXKSuZ/YM5Idf/eQJYwX3z3TczeidcXROZhKtb2k7JFn16l597w1N
psjv/pRVBj9mGYcIuuB6tz+n4UF9psN4A+Q/D5j+ISqXes9PwnmOArKj6kA8
XODyUuz/0xqT6kBvwkJ6y2/MZxf0fIWTX1NNTaKY/JNzJC0FkmznWu7+jvZr
ekUlWPhud+PE4u/NjOTB21s9nyReMPZB4FSnIKX13upErs4zZr30pnqQDy1S
pStcsN5b7VwFM6bOikjdivHYsUU8WGU1SlCChR9S77lvKbwF7e8KywyS1dL4
L1UV45VZC/j50uSDo52Rfy1Qxs/TFjxrqxM7ifZI+ew3WFZoZPDzL/bTc1bE
kVWdT1oTt+J6jo3KIolz91bMH4PxfGdWLWQW3J46PJNZD1Mnft62P0GrPnoW
5m/K93iwQ2PxDHd71EcVCf8GP7+47I0YwcNOa+FBbbZMtifi4TgF/HV65AIK
Eqx45UzGipVm2xHP2NgVRsSmr1i7Ee0vR251GZjJ9xT8nYb8OYFj5UTrwcGB
Nj0Gj8kd19RPIqbWlamx9D03D32eNmYH6iEUcqtAzlxGrng8xmvaOb4kxCbH
dfdJpj5L6/5qIkcdc18v8cf861x/JTQGJA7mcnB+2uQlP8m7f8kKT2bh/CnX
vSngP5Ri38jS60lcG3qrSIWZR0WZvawmHbLv5e0wf/WOt6AhSzEk9sqIfngK
3/+pTTAUuAwj+fkzHixd6/rmHrt/xdtLNFcjPlbhfioZq/zBVYEVb8WUhVaY
Ip9SoGU2DaWxq1d12zL7S7E9VYha9vtXaEA8xu9n/oeniH6xWubFI1y/cyfJ
YNzyjcs6mPU11f5UBk+Ktx1/zrYPF6N36Ldi/aWmtpjM6elIvDyilze7qQa6
zl8cvR/5qdwlOnUwx0XHX8meqU9QG4JHUwum7Hc3pRj7KHDqRSSsmFP3p8gE
79ebvx6tRd6j7/einsVGzgB5MjM37ncK5l82CwshoOFLxGzMH7gma+vgnPLb
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
MJ++UxFLnn0wyD4xMk/wBT/vffhGxOgR8h9NlX7xwLHXPlrWC/N724xy8NS9
an+xCPNJB34+pNyiEUix4pHuPad7cjC/o3kdPLg72nOasIUb8/9G4hyQiZ+o
Po9lz+SXtzvpoP+jJyyqA9tOZ91kFl4psrs+pn486u9FPhtD0ca7lnkiv4/u
3M/P34fFKrax4rE6+87nC99jPFOo20MuzRj+d4TVL+ss69e9ZoL2ZIpdIhws
CbR7eph5/oqhuxrIzDVHxrXvQf2S39Np0uk79Pcrxm+02QMevBdvWzblG/aL
T85JIm+5e7b+L8783/tdG3hQGFZ9S4QVX/Lsx5c6+Gsx36eU/5ykV5qbsuez
HLnrt1g9Gus/re8iwSlhapQt8nOo9Yt4ILPjjqntX8T3TTjURcpSb17ZgvMn
ad4imqjMzHkaugaf9yRdGorn/3viw7Jf2ntUp+cfx3jviHQNLBO+tOQL8m+9
VzypglFklFvT73XMfniZ+IAssvXLdu/D/v9UxVHUxfo8g9eqGE/bi/Dg0u9J
NXdZz+/wdwUn+7kj+hhltXBa64nApZF5sGr8OK2kYYXvGBb/J/z1U2OxkflZ
Sfz4xGzN7MYLe5jzKHBkjii1d56l95rfiL8VT6oiMz40Z1WY/adH8Ivo0bbq
TL+NE6EQBtLl2bOcWHyLqFwZOpdlj++J3is+rop4oI3OzeRi9J3dhxchv9Dk
SzF8dVYXf4R4V87s1mq49yTwzDIWHm3cDs2MkDcY357dVg0fVke+u7EG7e/P
2HQI7xEZXuGG8147Mnnk1OOJvFPqT5jXBbgnwPhe2/5c1Fs2/dzeRmJDMlQn
sfWKArueNq7673qRdpL0eJb9stlb6l6wfgS/IM2D6+Rtd+ptrMfZ7coG7q7i
FI422r+zGWWwv/aa5h5P9CdnO2Mh2OFjowXaP0Vl/rnM8nW575KI+GXTZm/o
G7/DutIb+aPDKSXwjp5h2VSI/YkPNpmQ+7FmTCTG494X+ef9/Xu3s6cDsV+Z
8zcEclYWyD2Yiv6fPlwD7pzQ2A5WfcRSrr8OGjA/KXavhZTqRYOOPtifn1NQ
DoNUUU3PEvz8r8to2OmR4sUrwHnFsg5NpOul4dKyWuSrfLk4QDYGSptnJTHn
1Vuus4HUqN3tV3qE73ey4t9f15ozj47g/jq9hYYrwskp8qz1fvGea3vzIPJR
5DalEokiUnpqCeJ5S81LSKHtBbkx/oz+DCckJhpCLeOO1URhfcLtaDWsjMm8
t+E7s160sks5bJLa9FJ5L9Of4px6JEZd94iv7zBD/beVoSlwd0GOTYoo2ufF
ShGwI8feou80zuM9nZ9F0moWDmw8jfgqhafVoOY4c9x9Fv79enHHJCGcl0Tn
3OCBrMEUh5xrjP+j/9QWQK6DruE1WdTLBakiIjJml53eCcTX/3vUQlpnWsQH
oD2m5Lp4/8fUdcdT/X//i2RXEkKJQpNKSymvS0kpRUNGMlqUhhKFdCsZJWUW
DXu0aEhROtemKHuPeyUjGdlC/e73Hr/H5/1Xjx6u6z1er/M65/l8nueB7Ss/
FczDeah08OXUB+4GqcWTeqlr7WxQ3bam79xD9OO6H55GitPd3K0p/ODq0x9d
HQbnceNDZqQC3eWauUtHI9ZzX/+n59SyCGqkXL/8FXWr475cfIR2Xukr2NpI
7fei4LXM9w1Vl19z+0MUwnsF6XwzV5mRdah/Swr7Smy8IqdfoeTrGjpiLh0U
fiCgYCTXfgnml/Fd5ZDi0/BnlifGz4CTbPArntEhfgLxWdfLDZBXPFzNi/1T
rChOfApmsldsn43+lhK7/5DTGurpquWIV8r018OBx3Net6A+m9bFicuHbtRO
vc+Dv6+myonfZn7xU1tauc+bpdhGdgr1rxxchH6J9fsbCE+ohXNENjefUHhA
/0F8GKXH+4cwn1nwuxY8dgT38gVg/Be6+hre9zlnKQzi+fTTKAPMLItUjCWQ
T0/p4aNvv2KhQO1/MJS58z1zBtY70b/ioFw5+p7hO8Rvelx6CIQteqIuiP7S
K7++I6+spA+Xz5rsZ9zOgsXZd9WCbmB8Iw/qocftvcZqfD5W5gvYIJKhwe+0
Ez8frMQCdmDxtkWob6VvXcOGBctz+cIeIp86PbkJrgnvSd1KqR/ObLyXyjMT
129BPwtsD144G0XhFxMqZzXNrMB+wqBbtcTtyWyddQ9wPy+8wOJcviJbQg7z
72eeY0RA9NThIYqe+9RXmSzNQ1z+nfGAJ5fUb5Mw1i7C/pWtQaPkoPcpj/f8
qE+foVsG1q0OK0xm4TzSV1nZoG4o8CJj0n8vo5IFkbzZdQuHuHoLppdcLrSs
/7RIcQHyPy9+NoDitqZd/2jc+EtbqJ8HEwVDK3hzuXoDBcYaEfru1kufpk/q
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
3QOPo23eC+7vQdR7kjhfyGVQDvur/qb8JFN3R0VdoPnvmcaBKz7R/L0B73bJ
Vsz3cJbxccaxtnWFX2uwHqVwopWI6Vm5F4mgPXWKqganzqjTuajHz2or5uMj
95FJJaaCfCLTVaOFXD8uoWBCu9/vzZSfmzLGR9a/yiF0nc6m8y6I5/Mt6+HT
J/en3B7B+aK2qPUQ678T1rNm4P35XKoCvy71Fk1afSnHaHattS7y705s4MB6
ZUbNnVH7rPWGB53u8Hs89gsxDy7mgOam2ZE2JgJ9SHbc2yryfOCC9xeclxEY
LMSD9UoPRO58RjxrU/WN7HCXNQmejXqjrGEbuDzLJEYP+2Wo04t5YJkxMvP1
FcQj0+w4sFD4h0pOLt6PuV89PH3WenguzT7Fl/xMkJbAfOtKmxbya8Guq6Kv
cd4Jc3ouvMr2TNlog/lL3/xPUDTp7ERVV+w3L7Gsgi06bYlH96PelndUIVkx
bv0suzB8vjWHfpK9/2PquuOp/r//NRtoUpLqRqmkJNL2emtoGIUKGansFqko
4aaQRMiqKISyRzb1uraE7D3uNSIays763e89Hr/P+68e9+F27/u+xhnP8zzP
0zsazVsE+fDP1GFkvFX2iXsA6NVlHvqMH3UV32n5DfHqn3+tWKTwvvlxSzY+
Sr/wpQS/nGzrZ2iB/vXzzjHkc/29zQBp/xzRJttZMWv25xn+voy6bA/2PG6B
872U9xOe/9ygT5gWwj5/YtfD0LRTvkITmV/sW97j6gR6+hHTpUj52fH0MEnQ
79wlloKE+rbNtgoDXjviVIIr9qTknLkE+Z/901Ys9rl8/dRhuJ9twkx88p7T
SfQE4vsmlp3tdBc7cGQt4A8vLwyilXZLtur3gF6V0edKTOzds1f0MuBzVJMW
7BIsdeEh5F8hjz924Me9yfJXSfZXJW6TT8gJ+D76PlY8s4yS2Hwnlf355lsz
UOWtzFsrZIGfe/LBfMLIQMGZRxzef3GSgbtkd614Uwz9JHUEK69ZKyhmcAz6
JR1u9iDNTz1Xj+iz9TVpE/yJuPldqd1vsJfUV021ePW4xt+BVqgvu86vxb5c
WK5aHfCRzflFWHbtE0kvmG8T0lnJykckpjw7LWA9rnG3Y39jt4ZziqBvskOn
Gbu9JyZtbrH5nMSVkmYk5bZGrbEe6oX3zn5D/xoZkRUkfFVF/XD4AMxzpuxm
3TPPsY5yst5ykKv1rajY//K9U9md1PekeI650Nz5YC8b/6an9iwlDHLEAx7M
9bvTDNpxjt2uEXkSX0GO9+PTf+eh35nqlIvHtg6OLt82h5ez/Nmdkc0fN1vD
+g+rpqG4y6GSHoehvttlPYgSzu2pPAz9yYybrHxWT/LcvZ65eQGcqky8/qrx
gc31UH+Ou92M+Zrz245Lse01YcDgIUT+qvJHfId85CSDdb6scm59JsVfEnd9
tZwTYX9TnZhYt8Hm1xWoV1MSoxiYucyYt8YD+AknvYfR7f0GBu8toD65wrEW
j/1uv/S7EvKtA24NeNmAG23vS/Z+UqS3F+CjNXnhte1sfhGxYLIF/SXWVOwF
fjGlisqyb29+Di6Rhn6AQ88HkefJfAkHU5jXgMrnEYtswh69QqCP4rutCmnr
G7grLmTja5T2zAI8VPg3dSfJv34+/i5bei30o+is/IpFvfsTokn6B32Wvvm5
2TDPwygsHe+cuNuTpwd6P/JaDTjg1xmvpAvs+DNEzYKLeD29TblKaa6/cAUT
r9ngXH8e+PgUv08MnLTl7tZ9ARDf9d1k4v1GOnEPQE+VInGJiXfs4zpvRVrv
oMIMHp/P0A+6ZCwdtz89oqrXza6H0VpSctEZjf5lH4TY86YoJW4TKPvh/Hbe
h/B5naz9Vtvy2qrJMZ39utIlBZ8PcAnXa4L5kxlf03FlTkweuZ/Ly4TRY17M
7pdiiB6mEHl3JcJvzOkpv/BoxIsPq7Qe+wj3aXt/M+4WqT0pFg56sWFFaYj3
QbV1pB3ou17ZUoV0h1qsCkA/nuLFZOKsmSjXN8DHMAwoYOJPFksdndcB3yhF
bxw57h/Rezw3/8DmwwgyeORYapAJ+voNjCJ8cgtHiDYjif065UYiFqjl22lF
AF+U8GLZkajyIRvQy6Nur2LiClX/fVGyME8i91YlVjPUCx04MJffHP1fvMjV
X5AE/cin8zPxtOjAZAkJn0xY7rtnBS/YE07PdrxY4ciRsNWgLxd+pgy/cLUe
TH8H/J8d0u2YZlZlnQ/5DfW5XCd+GHpRV7AR9LsmUxko3lb9e5YSfP6hk534
1+jWqnOgN8iITG3H0Rd+rRr/A/7RZlMvMiwwHqZehd+jhphYJdHk04d9gKff
leAgvt/ul6jtZ8dztK0en9F00r7ixeVg3+nSrXjnl46kmiGwT1EjTJxm5xw9
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

      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 360], 0.002777777777777778]], AbsoluteThickness[
      1.6]}, {}}}, {{}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Actual\"", TraditionalForm], 
    FormBox["\"Predicted\"", TraditionalForm]},
  AxesOrigin->{-1., -1.},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox[
   "\"Scatter plot of actual vs predicted values\"", TraditionalForm],
  PlotRange->{{-1., 2.2083818771821906`}, {-1., 2.2271649837493896`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.746346547029828*^9, {3.795777940973393*^9, 3.795777947174803*^9}, 
   3.7957785051517706`*^9, 3.7957848610167522`*^9, 3.795794328647512*^9, 
   3.795794364426918*^9, {3.7957944508396215`*^9, 3.795794474997987*^9}, {
   3.795796511863332*^9, 3.795796530197239*^9}, 3.7957995280937767`*^9, {
   3.7957999581814995`*^9, 3.7957999869066515`*^9}, 3.7958011192286806`*^9, 
   3.7958013444173064`*^9, 3.795827391417528*^9, 3.8074576738681116`*^9, 
   3.8074581595946956`*^9, 3.8074587919524207`*^9, 3.807459155887799*^9},
 CellLabel->
  "Out[271]=",ExpressionUUID->"196f3edc-f43d-457f-b099-995c3a9f6856"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Calculate", " ", "the", " ", "absolute", " ", "values", " ", "of", " ", 
   "the", " ", "differences"}], "*)"}]], "Input",
 CellChangeTimes->{{3.8074560667755623`*^9, 3.807456083051365*^9}, {
  3.807456160559596*^9, 
  3.807456175512784*^9}},ExpressionUUID->"ec74d013-1dbd-4890-94a7-\
20e0e03e9ae6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"actualNegativePredicted", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "yTest", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], ",", 
       RowBox[{"-", 
        RowBox[{
        "predicted", "\[LeftDoubleBracket]", "i", 
         "\[RightDoubleBracket]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "yTest", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7463347857895145`*^9, 3.7463348457800837`*^9}},
 CellLabel->
  "In[272]:=",ExpressionUUID->"74f08c63-548b-4c36-bec5-0399a0b9269b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{"Abs", "[", 
   RowBox[{"Plus", "@@@", "actualNegativePredicted"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.746334716730179*^9, 3.746334737021927*^9}, {
  3.74633476936543*^9, 3.7463347699000025`*^9}, {3.746334850517411*^9, 
  3.746334880900158*^9}},
 CellLabel->
  "In[273]:=",ExpressionUUID->"aaec4c4a-aaba-46b4-b6eb-a8e0194316ae"],

Cell[BoxData["0.012835438364002192`"], "Output",
 CellChangeTimes->{
  3.746346644015424*^9, 3.795777963462228*^9, 3.7957848783064957`*^9, 
   3.7957943844454527`*^9, {3.7958000300960083`*^9, 3.795800038304277*^9}, {
   3.795801390150051*^9, 3.795801397750746*^9}, 3.807457684395727*^9, 
   3.8074581687652893`*^9, 3.807458807618225*^9, 3.8074591661110916`*^9},
 CellLabel->
  "Out[273]=",ExpressionUUID->"df06aaf4-a3bd-4e9e-bcaa-88c05d9cea7c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Dimensions", "[", "actualPredicted", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Export", "[", 
  RowBox[{"\"\<ActualvsPredicted.txt\>\"", ",", "actualPredicted"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.795794623081814*^9, 3.795794646152365*^9}, 
   3.7957946816038804`*^9, {3.7957968160307283`*^9, 3.7957969108233175`*^9}, 
   3.795800057317376*^9, {3.8074581870120597`*^9, 3.8074581893382664`*^9}},
 CellLabel->
  "In[274]:=",ExpressionUUID->"584c0db3-29f2-4021-9c2b-0a275387a54c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"20000", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{
  3.7957946849000907`*^9, 3.7957969141982555`*^9, {3.7958000471535997`*^9, 
   3.795800060633532*^9}, 3.795801406616996*^9, 3.795967728027213*^9, {
   3.8074576929765453`*^9, 3.807457696991568*^9}, {3.8074581717815905`*^9, 
   3.807458192145399*^9}, 3.8074588139330883`*^9, 3.8074591701764617`*^9},
 CellLabel->
  "Out[274]=",ExpressionUUID->"7d3d32dd-e099-4946-906b-8970617f8ed8"],

Cell[BoxData["\<\"ActualvsPredicted.txt\"\>"], "Output",
 CellChangeTimes->{
  3.7957946849000907`*^9, 3.7957969141982555`*^9, {3.7958000471535997`*^9, 
   3.795800060633532*^9}, 3.795801406616996*^9, 3.795967728027213*^9, {
   3.8074576929765453`*^9, 3.807457696991568*^9}, {3.8074581717815905`*^9, 
   3.807458192145399*^9}, 3.8074588139330883`*^9, 3.8074591739799743`*^9},
 CellLabel->
  "Out[275]=",ExpressionUUID->"c35332cc-fb48-4d6c-9df0-d846c1d2f7fe"]
}, Open  ]],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.795997516320571*^9},ExpressionUUID->"59c8f751-fe5a-4023-98d0-\
4c2e4482a8de"]
},
WindowSize->{1536, 781},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
Magnification:>1.35 Inherited,
FrontEndVersion->"12.0 para Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 131, 3, 40, "Input",ExpressionUUID->"3165da32-4b06-4606-9620-cf0c73d81527"],
Cell[CellGroupData[{
Cell[714, 27, 388, 9, 111, "Input",ExpressionUUID->"ef179646-e028-4bd8-9e28-b27a857d6383"],
Cell[1105, 38, 152, 3, 40, InheritFromParent,ExpressionUUID->"7d98b350-338e-4e67-b5a8-2526f9ffa459"]
}, Open  ]],
Cell[1272, 44, 154, 3, 40, InheritFromParent,ExpressionUUID->"2ff983a6-ae2d-4a63-8651-39c45c1daa33"],
Cell[1429, 49, 921, 15, 61, "Input",ExpressionUUID->"94e3b12d-8af8-4190-8457-8ff1dbee74aa"],
Cell[CellGroupData[{
Cell[2375, 68, 1275, 27, 119, "Input",ExpressionUUID->"cea05b10-5180-4d83-8ffe-2bec0a1ecd5f"],
Cell[3653, 97, 2298, 48, 441, "Output",ExpressionUUID->"5284228c-d0b8-4777-ada5-302af618cf6e"]
}, Open  ]],
Cell[5966, 148, 271, 7, 40, "Input",ExpressionUUID->"21a64543-70ab-4f1d-9f90-dbb784a15836"],
Cell[CellGroupData[{
Cell[6262, 159, 222, 4, 61, "Input",ExpressionUUID->"91193f15-bce6-4a03-98b2-22af802011ea"],
Cell[6487, 165, 458, 9, 45, "Output",ExpressionUUID->"d3baec9f-4663-4422-a144-ecd3e02d67b4"]
}, Open  ]],
Cell[6960, 177, 1049, 25, 169, "Input",ExpressionUUID->"f6a190ae-4181-411f-b89a-d4451d35792d"],
Cell[CellGroupData[{
Cell[8034, 206, 622, 15, 211, "Input",ExpressionUUID->"78d5f27e-9640-4942-b131-bb18871b91fc"],
Cell[8659, 223, 555, 10, 45, "Output",ExpressionUUID->"7076036c-4d07-4248-9b07-3150c67953ed"],
Cell[9217, 235, 555, 10, 45, "Output",ExpressionUUID->"1c28795c-7f27-4561-8339-ab37da2b7b98"]
}, Open  ]],
Cell[9787, 248, 1021, 26, 211, "Input",ExpressionUUID->"04ba8008-032b-4069-a36c-a5069bddf733"],
Cell[10811, 276, 227, 5, 40, "Input",ExpressionUUID->"cd1c9977-1a17-47ce-aaea-4f74da40ffcd"],
Cell[11041, 283, 480, 11, 161, "Input",ExpressionUUID->"4944b110-c99a-45c8-a2db-669b0d8d826d"],
Cell[CellGroupData[{
Cell[11546, 298, 267, 7, 40, InheritFromParent,ExpressionUUID->"140ab8e4-6173-4ad5-8479-0d53ba0673d8"],
Cell[11816, 307, 643, 13, 49, "Output",ExpressionUUID->"c9b68bba-c50a-4050-92a7-af197287211e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12496, 325, 1221, 32, 189, "Input",ExpressionUUID->"d123a4bc-bd77-438a-a82d-ae6223069771"],
Cell[13720, 359, 633, 13, 45, "Output",ExpressionUUID->"7fca1ccc-f1ed-4eba-888a-b579c99ba4c3"],
Cell[14356, 374, 611, 12, 45, "Output",ExpressionUUID->"836154cd-8cda-4799-952c-78fd4f36359f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15004, 391, 804, 20, 161, "Input",ExpressionUUID->"9263549b-3447-4082-97c5-9395b292de8a"],
Cell[15811, 413, 496, 9, 45, "Output",ExpressionUUID->"a7ef9559-778e-4bd0-b58c-8875d98b42c2"],
Cell[16310, 424, 646, 14, 45, "Output",ExpressionUUID->"31161171-d77d-4f37-b7da-2608db58bfa7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16993, 443, 873, 21, 161, "Input",ExpressionUUID->"e4b30493-bebf-4a4d-b4a2-8d574d2a5bdd"],
Cell[17869, 466, 592, 10, 45, "Output",ExpressionUUID->"b3ecf1c6-809e-4205-86ec-4399c05cfcf7"],
Cell[18464, 478, 744, 15, 45, "Output",ExpressionUUID->"81ae990c-fa51-4ce8-9e03-fcd7537a2e7a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19245, 498, 347, 9, 40, "Input",ExpressionUUID->"6d50c963-4d65-4f5a-8ffe-170ecfa40b2b"],
Cell[19595, 509, 346, 9, 45, "Output",ExpressionUUID->"ff7584e3-dc23-4557-8fd9-3c5deb185312"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19978, 523, 646, 13, 69, "Input",ExpressionUUID->"ec2f488b-c4a4-4a12-88ae-3b037cbfc00c"],
Cell[20627, 538, 645, 13, 45, "Output",ExpressionUUID->"a495a4ec-b63c-4c94-b7c3-536c9b66c6f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21309, 556, 1120, 24, 119, "Input",ExpressionUUID->"1c54c94f-9500-4b61-976c-a322b3384646"],
Cell[22432, 582, 32380, 666, 113, "Output",ExpressionUUID->"46442e11-9a2b-4731-a116-d8cebc5c683b"]
}, Open  ]],
Cell[54827, 1251, 246, 6, 40, "Input",ExpressionUUID->"df41c7e5-1e9f-4b81-82bf-598812ed1b9b"],
Cell[CellGroupData[{
Cell[55098, 1261, 510, 13, 61, "Input",ExpressionUUID->"67961a98-d963-4c9e-8c8d-9e70ed91848e"],
Cell[55611, 1276, 31164, 638, 113, "Output",ExpressionUUID->"dfb3d13b-c5a1-4536-aae4-818fdb319b11"]
}, Open  ]],
Cell[86790, 1917, 227, 5, 40, "Input",ExpressionUUID->"241ab528-8ace-4a96-9deb-8433347eb8de"],
Cell[CellGroupData[{
Cell[87042, 1926, 804, 15, 111, "Input",ExpressionUUID->"65a8f121-40f7-42c8-8cf9-bb6c63b6c0d1"],
Cell[87849, 1943, 31318, 641, 113, "Output",ExpressionUUID->"1b92fc13-ef7f-4a32-83c2-5c3a7ad7e7fa"],
Cell[119170, 2586, 31294, 641, 113, "Output",ExpressionUUID->"0d973082-e917-4400-95fc-0852e6f6bade"],
Cell[150467, 3229, 31272, 641, 113, "Output",ExpressionUUID->"86d491d8-0a0a-41dd-9c74-6f31e73b3048"],
Cell[181742, 3872, 31240, 639, 113, "Output",ExpressionUUID->"837673e9-82ac-45d6-8af9-b3c97c42703a"],
Cell[212985, 4513, 31750, 653, 245, "Output",ExpressionUUID->"1ed44493-30dd-4cbc-9074-96ddf0bb557d"]
}, Open  ]],
Cell[244750, 5169, 131, 3, 40, "Input",ExpressionUUID->"57e97210-a87d-46a8-b99d-1bfa87bc7790"],
Cell[244884, 5174, 224, 5, 40, "Input",ExpressionUUID->"a49c4187-0a0c-4789-bc01-24ba7d179507"],
Cell[245111, 5181, 327, 7, 40, "Input",ExpressionUUID->"fb711d0a-74b6-4489-bcc5-062b1baf0949"],
Cell[245441, 5190, 669, 19, 61, "Input",ExpressionUUID->"3055bd86-2014-40e2-926e-e6f222c1f45e"],
Cell[CellGroupData[{
Cell[246135, 5213, 782, 16, 40, "Input",ExpressionUUID->"8355e2ed-0fca-49b7-b9df-7ba9f53944ce"],
Cell[246920, 5231, 841, 14, 45, "Output",ExpressionUUID->"2200603b-5ead-4c73-bdf3-c6e24eda28e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[247798, 5250, 870, 21, 111, "Input",ExpressionUUID->"586b5715-27d6-4f35-8ef6-e027b0ce5b81"],
Cell[248671, 5273, 316500, 5210, 487, "Output",ExpressionUUID->"196f3edc-f43d-457f-b099-995c3a9f6856"]
}, Open  ]],
Cell[565186, 10486, 343, 8, 40, "Input",ExpressionUUID->"ec74d013-1dbd-4890-94a7-20e0e03e9ae6"],
Cell[565532, 10496, 658, 19, 61, "Input",ExpressionUUID->"74f08c63-548b-4c36-bec5-0399a0b9269b"],
Cell[CellGroupData[{
Cell[566215, 10519, 386, 8, 61, "Input",ExpressionUUID->"aaec4c4a-aaba-46b4-b6eb-a8e0194316ae"],
Cell[566604, 10529, 444, 7, 45, "Output",ExpressionUUID->"df06aaf4-a3bd-4e9e-bcaa-88c05d9cea7c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[567085, 10541, 510, 9, 111, "Input",ExpressionUUID->"584c0db3-29f2-4021-9c2b-0a275387a54c"],
Cell[567598, 10552, 479, 9, 45, "Output",ExpressionUUID->"7d3d32dd-e099-4946-906b-8970617f8ed8"],
Cell[568080, 10563, 458, 7, 45, "Output",ExpressionUUID->"c35332cc-fb48-4d6c-9df0-d846c1d2f7fe"]
}, Open  ]],
Cell[568553, 10573, 129, 3, 40, "Input",ExpressionUUID->"59c8f751-fe5a-4023-98d0-4c2e4482a8de"]
}
]
*)

